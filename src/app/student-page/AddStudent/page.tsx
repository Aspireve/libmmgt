"use client";

import React, { useState } from "react";
import Header from "../../Header/header";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useForm, FieldValues } from "react-hook-form";
import { useCreate } from "@refinedev/core";
import { useRouter } from "next/navigation";
import { Student } from "../studentcolumns";
import { toast } from "sonner";
import { useSelector } from "react-redux";
import { RootState } from "@/redux/store/store";
import Link from "next/link";
import { Loader2 } from "lucide-react";

const AddStudent: React.FC = () => {
  const [isUpdating, setIsUpdating] = useState(false);

  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Student>({
    defaultValues: {
      student_name: "",
      department: "",
      email: "",
      phone_no: "",
      address: "",
      roll_no: 0,
      year_of_admission: "",
      password: "",
      confirm_password: "",
      date_of_birth: "",
      gender: "",
    },
  });

  const { mutate } = useCreate();
  const auth = useSelector((state: RootState) => state.auth);

  const onSubmit = (data: FieldValues) => {
    setIsUpdating(true);
    const hardcodedInstituteId = "828f0d33-258f-4a92-a235-9c1b30d8882b";
    const hardcodedInstituteName = "TIA";

    const studentData: Student = {
      student_id: "", // Will be generated by backend
      student_uuid: "",
      student_name: data.student_name,
      department: data.department,
      email: data.email,
      phone_no: data.phone_no,
      address: data.address,
      roll_no: Number(data.roll_no),
      year_of_admission: data.year_of_admission,
      password: data.password,
      confirm_password: data.confirm_password,
      institute_id: auth.institute_uuid || hardcodedInstituteId,
      institute_name: auth.institute_name || hardcodedInstituteName,
      is_archived: false,
      date_of_birth: data.date_of_birth,
      gender: data.gender,
    };

    console.log("Payload:", studentData);

    mutate(
      { resource: "student/create", values: studentData },
      {
        onSuccess: () => {
          toast.success("Student added successfully!", { position: "top-center" });
          setIsUpdating(false);
          router.push("/student-page");
        },
        onError: (error: any) => {
          setIsUpdating(false);
          toast.error("Error adding student: " + error.message, { position: "top-center" });
        },
      }
    );
  };

  return (
    <>
      <Header heading="Add Student" subheading="Tanvir Chavan" />

      <section className="p-10">
        <div className="container mx-auto">
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              {/* Student Name */}
              <div>
                <Label>Full Name</Label>
                <Input
                  type="text"
                  {...register("student_name", { required: "Full Name is required" })}
                  placeholder="Enter Full Name"
                />
                {errors.student_name && (
                  <p className="text-red-500 text-sm">{errors.student_name.message}</p>
                )}
              </div>
              {/* Date of Birth */}
              <div>
                <Label>Date of Birth</Label>
                <Input
                  type="date"
                  {...register("date_of_birth", { required: "Date of Birth is required" })}
                  placeholder="Enter Date of Birth"
                  max={new Date().toISOString().split("T")[0]}
                />
                {errors.date_of_birth && (
                  <p className="text-red-500 text-sm">{errors.date_of_birth.message}</p>
                )}
              </div>
              {/* Department */}
              <div>
                <Label>Department</Label>
                <Input
                  type="text"
                  {...register("department", { required: "Department is required" })}
                  placeholder="Enter Department"
                />
                {errors.department && (
                  <p className="text-red-500 text-sm">{errors.department.message}</p>
                )}
              </div>
              {/* Email */}
              <div>
                <Label>Email</Label>
                <Input
                  type="email"
                  {...register("email", { required: "Email is required" })}
                  placeholder="Enter Email"
                />
                {errors.email && (
                  <p className="text-red-500 text-sm">{errors.email.message}</p>
                )}
              </div>
              {/* Phone Number */}
              <div>
                <Label>Phone Number</Label>
                <Input
                  type="text"
                  {...register("phone_no", { required: "Phone Number is required" })}
                  placeholder="Enter Phone Number"
                />
                {errors.phone_no && (
                  <p className="text-red-500 text-sm">{errors.phone_no.message}</p>
                )}
              </div>
              {/* Address */}
              <div>
                <Label>Address</Label>
                <Input
                  type="text"
                  {...register("address", { required: "Address is required" })}
                  placeholder="Enter Address"
                />
                {errors.address && (
                  <p className="text-red-500 text-sm">{errors.address.message}</p>
                )}
              </div>
              {/* Roll No. */}
              <div>
                <Label>Roll No.</Label>
                <Input
                  type="number"
                  {...register("roll_no", {
                    required: "Roll No. is required",
                    valueAsNumber: true,
                  })}
                  placeholder="Enter Roll No."
                />
                {errors.roll_no && (
                  <p className="text-red-500 text-sm">{errors.roll_no.message}</p>
                )}
              </div>
              {/* Year of Admission */}
              <div>
                <Label>Year of Admission</Label>
                <Input
                  type="text"
                  {...register("year_of_admission", { required: "Year of Admission is required" })}
                  placeholder="Enter Year of Admission"
                />
                {errors.year_of_admission && (
                  <p className="text-red-500 text-sm">{errors.year_of_admission.message}</p>
                )}
              </div>
              {/* Password */}
              <div>
                <Label>Password</Label>
                <Input
                  type="password"
                  {...register("password", { required: "Password is required" })}
                  placeholder="Enter Password"
                />
                {errors.password && (
                  <p className="text-red-500 text-sm">{errors.password.message}</p>
                )}
              </div>
              {/* Confirm Password */}
              <div>
                <Label>Confirm Password</Label>
                <Input
                  type="password"
                  {...register("confirm_password", {
                    required: "Confirm Password is required",
                    validate: (value, { password }) =>
                      value === password || "Passwords do not match",
                  })}
                  placeholder="Confirm Password"
                />
                {errors.confirm_password && (
                  <p className="text-red-500 text-sm">{errors.confirm_password.message}</p>
                )}
              </div>
              {/* Gender */}
              <div>
                <Label>Gender</Label>
                <select
                  {...register("gender", {
                    required: "Gender is required",
                    validate: (value) =>
                      ["male", "female"].includes(value) ||
                      "Gender must be 'male' or 'female'",
                  })}
                  className="w-full p-2 border border-[#717680] rounded"
                >
                  <option value="">Select Gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                </select>
                {errors.gender && (
                  <p className="text-red-500 text-sm">{errors.gender.message}</p>
                )}
              </div>
            </div>
            <div className="flex justify-center gap-4">
              <Link href="/student-page">
                <Button variant="outline">Cancel</Button>
              </Link>
              {isUpdating ? (
                <Button type="submit" disabled className="bg-[#1E40AF] text-white rounded-[10px]">
                  Adding Student
                  <Loader2 className="h-5 w-5 animate-spin" />
                </Button>
              ) : (
                <Button type="submit" className="bg-[#1E40AF] text-white rounded-[10px]">
                  Add Student
                </Button>
              )}
            </div>
          </form>
        </div>
      </section>
    </>
  );
};

export default AddStudent;
